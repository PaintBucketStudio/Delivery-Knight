//LIBRARIES
import java.util.Scanner;
import java.awt.event.*;
import javax.swing.*;
import java.awt.*;import
java.util.ArrayList;    import static java.lang.Math.*;
import javax.swing.JLabel;
import sun.audio.*;
import java.io.*;
import java.applet.*;
import java.io.File;
import javax.imageio.ImageIO;
import java.lang.String;
import java.awt.GraphicsDevice;
public class Game extends JPanel implements KeyListener, Runnable, MouseListener, MouseMotionListener
{
   
    
   

    //IMAGE MANAGER
    private ImageManager image;
    //VARIABLES
    Scanner scan = new Scanner( System.in );
    private boolean action=true;

    //GAME VARIABLES
    private int WIDTH = 1000;
    private int HEIGHT = 500;
    private Thread game;
    int p1LatestKey=0;
    int p2LatestKey=0;

    int leftLogoX=-600;
    int rightLogoX=1300;

    //TIMERS
    private int animationTime=0;
    private int platformTime=200;
    private int logoTime=0;

    //PLAYER VARIABLES
    private ArrayList<Player> p;
    //private Player one;
    //private Player ptwo;

    //POWERUP
    private ArrayList<PowerUp> powerUps;

    //BACKGROUND VARIABLES
       private ArrayList<Background> backgrounds5;
    private ArrayList<Background> backgrounds;
    private ArrayList<Background> backgrounds2;
    private ArrayList<Background> backgrounds3;
    private ArrayList<Background> backgrounds4;
    private ArrayList<Background> backgrounds6;
 

    //PLATFORM VARIABLES
    //private Platform initialPlatform;
    private ArrayList<Platform> platforms;
    double platformSpeed=2;
    double platformSpawnRate=1.2;
    int designatedPlatform=-1;
    int designatedPlatform2=-1;
    int platformNumber=1;

    //LABEL VARIABLES
 
    private JLabel logoLabel;
    ImageIcon logo = new ImageIcon("deliveryknightlogo.png");


    private JLayeredPane pane;

    //GAME CONSTURCTOR: ONCE APP IS CALLED, ALL THESE ARE CONSTRUCTED. OCCURS RIGHT WHEN APP OPENS. GAME DOES NOT NEED TO START FOR THESE TO APPEAR
    public Game()
    {
       
        
        
    
        //PLAYER CONSTRUCTION
        p=new ArrayList<Player>();
        p.add(new Player( WIDTH/4, (HEIGHT/4)-20,0));

        platforms = new ArrayList<Platform> ();
        platforms.add(new Platform(0,350,1000,10000,1));

        backgrounds=new ArrayList<Background>();
        backgrounds.add(new Background(100,0,1,0));

        backgrounds2=new ArrayList<Background>();
        backgrounds2.add(new Background(100,0,2,1));

        backgrounds3=new ArrayList<Background>();
        backgrounds3.add(new Background(100,0,3,2));
        
       
        
         backgrounds4=new ArrayList<Background>();
        backgrounds4.add(new Background(0,300,5,3));
        
         backgrounds5=new ArrayList<Background>();
        backgrounds5.add(new Background(0,100,2,4));
        
        backgrounds6=new ArrayList<Background>();
        backgrounds6.add(new Background(0,0,1,5));
        
        

         

        //setPreferredSize( new Dimension( 1300,700));//WIDTH, HEIGHT ) );//set the size of the game area 
        
        
        powerUps=new ArrayList<PowerUp>();
        //IMAGE
        image=new ImageManager();//Loads all images

        

        logoLabel=new JLabel();
        this.add(logoLabel);
        logoLabel.setVisible(true);

        //KEY LISTENER CONSTRUCTION
        this.addKeyListener(this);//gives the game the ability to "listen" for keystrokes
       //this.requestFocusInWindow();
        //setFocusable(true);//keeps the focus on the game
        this.addMouseListener(this);//
        this.addMouseMotionListener(this);//

        //GAME STARTER
        game = new Thread(this);
        game.start();   //STARTS GAME!

    }
    //KEYLISTENER: READS THE KEYS TO CONTROL THE GAME
    public void keyPressed( KeyEvent event )//method that determines which key was pressed
    //and calls the appropriate method
    {
        this.requestFocusInWindow();
        if( event.getKeyCode() == KeyEvent.VK_ENTER)
        {
            game.start();this.requestFocusInWindow();
        }

       
        

            if( event.getKeyCode() == KeyEvent.VK_SHIFT)

                if (p.get(0).isJump()==false)
                {
                    if (p.get(0).isFreefall()==true)
                    {
                        p.get(0).setGrace(1);
                        p.get(0).setReducer(0);
                        p.get(0).jumpReset();
                    }
                    else
                    {
                        p.get(0).setGrace(1);
                        p.get(0).setReducer(0);
                        p.get(0).setJump(true);
                        p.get(0).setFloor(-1);
                    }
                }
                else if(p.get(0).canMirAirJump()==true)
                {
                    p.get(0).jumpReset();
                }

           
            
           
        
        this.repaint();
        //this.
        //repaint();//repaints the screen to show the new location and health
    }//end method keyPressed

    public void keyTyped( KeyEvent event )//required method that does nothing
    {}//end method keyTyped

    public void keyReleased( KeyEvent event )//required method that does nothing
    {

        
        this.repaint();

    }

    //MOUSELISTENER
    public void mousePressed( MouseEvent event )
    {
    }

    public void mouseExited( MouseEvent event )
    {

    }

    public void mouseEntered( MouseEvent event )
    {

    }

    public void mouseReleased( MouseEvent event )
    {

    }

    public void mouseClicked( MouseEvent event )
    {

    }

    public void mouseDragged( MouseEvent e )
    {

    }

    public void mouseMoved( MouseEvent e )
    {

    }

    //RUNNING GAME: GAME NEEDS TO START IN ORDER FOR THESE TO RUN
    public void run()
    {
        //fox.setLocation(p.get(0).getX()-70,p.get(0).getY()-70);
        while(true)
        {
            

            
            logoLabel.setIcon(logo);
            logoLabel.setLocation(400,0);

            
           

            //CONTROL COMPANION
           

            //SPAWN
            this.spawn();

            // AUTOMATIC EFFECTS
            this.effects();           //allows ongoing effects to run

            //COLLISION CALLER
            this.collide();         //deals with everything collision related

            //DEATH


            //ACTIONS
            this.actions();

           

            //PAINTER 

            this.repaint();
            
            

            try
            {
                Thread.sleep(10);
            }
            catch (InterruptedException e ){
            }

        }
    }


    public void spawn()
    {
        platformTime+=platformSpawnRate;

        for(int i=0;i<backgrounds2.size();i++)
        {
            if (backgrounds2.get(i).getX()<-2400)
            {
                backgrounds2.remove(i);
            }
        }
        for(int i=0;i<backgrounds3.size();i++)
        {
            if (backgrounds3.get(i).getX()<-2400)
            {
                backgrounds3.remove(i);
            }
        }

        for(int i=0;i<backgrounds.size();i++)
        {
            if (backgrounds.get(i).getX()<-2400)
            {
                backgrounds.remove(i);
            }
        }
         for(int i=0;i<backgrounds4.size();i++)
        {
            if (backgrounds4.get(i).getX()<-2400)
            {
                backgrounds4.remove(i);
            }
        }
         for(int i=0;i<backgrounds5.size();i++)
        {
            if (backgrounds5.get(i).getX()<-2400)
            {
                backgrounds5.remove(i);
            }
        }
     
        
        if(backgrounds.size()>0 && backgrounds.get(backgrounds.size()-1).getX()<-1200)
        {
            backgrounds.add(new Background(1400,0,1,0));
        }
        if(backgrounds2.size()>0 && backgrounds2.get(backgrounds2.size()-1).getX()<-1200)
        {
            backgrounds2.add(new Background(1400,0,2,1));
        }
        if(backgrounds3.size()>0 && backgrounds3.get(backgrounds3.size()-1).getX()<-1200)
        {
            backgrounds3.add(new Background(1400,0,3,2));
        }
        if(backgrounds4.size()>0 && backgrounds4.get(backgrounds4.size()-1).getX()==0)
        {
            backgrounds4.add(new Background(1000,300,5,3));
        }
        if(backgrounds5.size()>0 && backgrounds5.get(backgrounds5.size()-1).getX()==0)
        {
            backgrounds5.add(new Background(1000,100,2,4));
        }
        if(backgrounds6.size()>0 && backgrounds6.get(backgrounds6.size()-1).getX()==0)
        {
            backgrounds6.add(new Background(1000,0,1,5));
        }
       
        


    }

    public void effects()
    {
        animationTime++;
        if(animationTime==10)
        {
            for(int i=0;i<1; i++)
            {
                p.get(i).setFrame();   

            }
            animationTime=0;
            //one.setJump(true);   
        }
    }

    public void collide()
    {
       
        for (int j=0;j<1;j++)
        {

            
            for( int i = 0; i < platformNumber; i++ )
            {
               //Adjusts the players position after landing
                if ((p.get(j).getFrame()>=12 && p.get(j).getFrame()<20) && (p.get(j).getFloor()>-1) && (p.get(j).getLanding()==true))
                {

                    p.get(j).setY(platforms.get(p.get(j).getFloor()).getTop()-25);
                }

                
                if(i<platformNumber)
                {
                    //FLOOR

                    if ((p.get(j).getX()-12<platforms.get(i).getRight()&& p.get(j).getX()+12>platforms.get(i).getLeft()) && (platforms.get(i).getTop()>p.get(j).getY()) 
                    &&(platforms.get(i).getTop()-p.get(j).getY()<30 && platforms.get(i).getTop()-p.get(j).getY()>10)&&p.get(j).isGoingUp()==false)
                    {

                        //p.get(j).setGrounded(true);

                        p.get(j).setY(platforms.get(i).getTop()-30);

                        if (p.get(j).getLanding()==true && p.get(j).getFalling()==true)
                        {

                            p.get(j).setFrame();
                        }
                        p.get(j).setLanding(false);
                        p.get(j).setFalling(false);
                        p.get(j).setFloor(i);

                        //invalid--;
                    }
                    if(p.get(j).getFloor()>=0  &&! ((p.get(j).getX()<platforms.get(p.get(j).getFloor()).getRight()&& p.get(j).getX()>platforms.get(p.get(j).getFloor()).getLeft()) && 
                        (platforms.get(p.get(j).getFloor()).getTop()-p.get(j).getY()<40 && platforms.get(p.get(j).getFloor()).getTop()-p.get(j).getY()>-40)))
                    {
                        

                        p.get(j).setFloor(-1);

                        p.get(j).setLanding(true);

                        //p.get(j).setGrounded(false);

                    }

                    
                }
            }
        }

    }

   

    public void actions()
    {
        for (int i=0;i<1;i++)
        {
            p.get(i).jump();
            p.get(i).knockBack();
            p.get(i).crash();
            p.get(i).flat();
            p.get(i).bounce();
            p.get(i).fall();
            p.get(i).isFreefall();
            p.get(i).frame();
            p.get(i).falling();

        }
        for( int i = 0; i < backgrounds.size(); i++ )
        {
            backgrounds.get(i).move();
        }
        for( int i = 0; i < backgrounds2.size(); i++ )
        {
            backgrounds2.get(i).move();
        }
        for( int i = 0; i < backgrounds3.size(); i++ )
        {
            backgrounds3.get(i).move();
        }
        for( int i = 0; i < backgrounds4.size(); i++ )
        {
            backgrounds4.get(i).move();
        }
         for( int i = 0; i < backgrounds5.size(); i++ )
        {
            backgrounds5.get(i).move();
        }
          for( int i = 0; i < backgrounds6.size(); i++ )
        {
            backgrounds6.get(i).move();
        }
        
        
       

    }

    

    public void paintComponent( Graphics page )
    {

        super.paintComponent( page );
        
         
        
        
        for( int i = 0; i < backgrounds.size(); i++ )
        {
            page.drawImage(image.getImage(backgrounds.get(i).getImage()),backgrounds.get(i).getX(),backgrounds.get(i).getY(),this);
        }
        for( int i = 0; i < backgrounds2.size(); i++ )
        {
            page.drawImage(image.getImage(backgrounds2.get(i).getImage()),backgrounds2.get(i).getX(),backgrounds2.get(i).getY(),this);
        }
        for( int i = 0; i < backgrounds3.size(); i++ )
        {
            page.drawImage(image.getImage(backgrounds3.get(i).getImage()),backgrounds3.get(i).getX(),backgrounds3.get(i).getY(),this);
        }
        
            for( int i = 0; i < backgrounds6.size(); i++ )
        {
            page.drawImage(image.getImage(backgrounds6.get(i).getImage()),backgrounds6.get(i).getX(),backgrounds6.get(i).getY(),this);
        }
         for( int i = 0; i < backgrounds5.size(); i++ )
        {
            page.drawImage(image.getImage(backgrounds5.get(i).getImage()),backgrounds5.get(i).getX(),backgrounds5.get(i).getY(),this);
        }
         for( int i = 0; i < backgrounds4.size(); i++ )
        {
            page.drawImage(image.getImage(backgrounds4.get(i).getImage()),backgrounds4.get(i).getX(),backgrounds4.get(i).getY(),this);
        }
        


    
        
        

        
        //initialPlatform.draw(page);
        for( int i = 0; i < platforms.size(); i++ )
        {
            platforms.get(i).draw(page);
        }
        
        
        for(int i=0;i<1;i++)
        {
            //p.get(i).draw( page ); 

            
                page.drawImage(image.getImage(p.get(i).getImage()),p.get(i).getX()-40,p.get(i).getY()-105,this);
            

            //ptwo.draw( page);
        }

        

       

        

        this.setFocusable(true);
    }// end method paintComponent

}
